apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: spotify-pipeline
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: spotify-pipeline
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: spotify-config
              key: DB_NAME
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: spotify-secrets
              key: DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: spotify-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: spotify-postgres-service
  namespace: spotify-pipeline
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: spotify-pipeline
data:
  01-init-schema.sql: |
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS raw;
    CREATE SCHEMA IF NOT EXISTS processed; 
    CREATE SCHEMA IF NOT EXISTS analytics;
    CREATE SCHEMA IF NOT EXISTS monitoring;
    
    -- Create basic tables
    CREATE TABLE IF NOT EXISTS raw.users (
        user_id VARCHAR PRIMARY KEY,
        username VARCHAR NOT NULL,
        email VARCHAR,
        country VARCHAR(2),
        subscription_type VARCHAR,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS raw.artists (
        artist_id VARCHAR PRIMARY KEY,
        name VARCHAR NOT NULL,
        genres TEXT[],
        followers INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS raw.tracks (
        track_id VARCHAR PRIMARY KEY,
        name VARCHAR NOT NULL,
        artist_id VARCHAR REFERENCES raw.artists(artist_id),
        album_id VARCHAR,
        duration_ms INTEGER,
        popularity INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS raw.streaming_history (
        id BIGSERIAL PRIMARY KEY,
        user_id VARCHAR REFERENCES raw.users(user_id),
        track_id VARCHAR REFERENCES raw.tracks(track_id),
        played_at TIMESTAMP NOT NULL,
        ms_played INTEGER,
        skipped BOOLEAN DEFAULT false,
        reason_start VARCHAR,
        reason_end VARCHAR,
        shuffle BOOLEAN DEFAULT false,
        platform VARCHAR,
        session_id VARCHAR,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_streaming_history_played_at ON raw.streaming_history(played_at);
    CREATE INDEX IF NOT EXISTS idx_streaming_history_user_id ON raw.streaming_history(user_id);
    CREATE INDEX IF NOT EXISTS idx_streaming_history_track_id ON raw.streaming_history(track_id);