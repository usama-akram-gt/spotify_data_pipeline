version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: spotify-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: spotify
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka and Zookeeper for streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: spotify-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: spotify-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: spotify-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: spotify-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Airflow for workflow orchestration
  airflow:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: spotify-airflow
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    volumes:
      - ../config/airflow/dags:/opt/airflow/dags
      - ../logs:/opt/airflow/logs
      - airflow_data:/opt/airflow
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Beam Runner for Python pipelines
  beam:
    build:
      context: .
      dockerfile: ./beam/Dockerfile
    container_name: spotify-beam
    depends_on:
      - postgres
      - kafka
    volumes:
      - ../scripts:/app/scripts
      - ../data:/app/data
      - ../config:/app/config
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=spotify
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Scio/Scala Runner
  scio:
    build:
      context: ../scripts/scio_pipelines
      dockerfile: Dockerfile
    container_name: spotify-scio
    depends_on:
      - postgres
      - kafka
    volumes:
      - ../scripts/scio_pipelines:/app
      - ../data:/app/data
      - ../config:/app/config
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=spotify
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Dashboard for visualization
  dashboard:
    image: metabase/metabase:latest
    container_name: spotify-dashboard
    depends_on:
      - postgres
    ports:
      - "3000:3000"
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase
      - MB_DB_PORT=5432
      - MB_DB_USER=postgres
      - MB_DB_PASS=postgres
      - MB_DB_HOST=postgres
    volumes:
      - metabase_data:/metabase-data

volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  airflow_data:
  metabase_data: 